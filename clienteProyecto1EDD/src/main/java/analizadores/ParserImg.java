
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import objetos.ErrorCom;
import estructuras.ListaEnlSim;
import objetos.Capa;
import objetos.Pixel;
import objetos.Imagen;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserImg extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symI.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserImg() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserImg(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserImg(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\005\002\000\002\006" +
    "\002\000\002\002\011\000\002\002\004\000\002\002\002" +
    "\000\002\007\002\000\002\003\005\000\002\003\004\000" +
    "\002\003\002\000\002\004\004\000\002\004\004\000\002" +
    "\004\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\010\002\ufffc\003\005\004\004\001\002\000" +
    "\004\006\011\001\002\000\010\002\ufffc\003\005\004\004" +
    "\001\002\000\004\002\007\001\002\000\004\002\001\001" +
    "\002\000\004\002\ufffd\001\002\000\010\003\000\004\000" +
    "\007\000\001\002\000\010\003\014\004\013\007\ufff8\001" +
    "\002\000\010\003\ufffb\005\ufffb\007\ufffb\001\002\000\010" +
    "\003\014\004\013\007\ufff8\001\002\000\004\007\016\001" +
    "\002\000\010\002\uffff\003\uffff\004\uffff\001\002\000\010" +
    "\002\ufffc\003\005\004\004\001\002\000\004\002\ufffe\001" +
    "\002\000\004\007\ufff9\001\002\000\010\003\024\005\023" +
    "\007\ufff5\001\002\000\010\003\014\004\013\007\ufff8\001" +
    "\002\000\010\003\024\005\023\007\ufff5\001\002\000\004" +
    "\007\ufffa\001\002\000\004\007\ufff6\001\002\000\004\007" +
    "\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\004\002\005\001\001\000\002\001\001\000" +
    "\004\002\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\011\001\001\000\004\003" +
    "\014\001\001\000\004\007\021\001\001\000\004\003\020" +
    "\001\001\000\002\001\001\000\004\006\016\001\001\000" +
    "\004\002\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\024\001\001\000\004\003\026\001\001\000" +
    "\004\004\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserImg$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserImg$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserImg$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    ListaEnlSim<ErrorCom> erroresCom;
    ListaEnlSim<Imagen> todasImagenesAct;    
    Imagen imagenAct;

	public ParserImg(LexerImg lex) {
		super(lex);
        this.erroresCom = lex.getErroresCom();
        todasImagenesAct = new ListaEnlSim<>();
        imagenAct = new Imagen();        
	}

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        erroresCom.add(erroresCom,new ErrorCom("Sintactico","No se esperaba Componente",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        erroresCom.add(erroresCom,new ErrorCom("Sintactico","Error sintactico Irrecuperable",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    }

    protected int error_sync_size() {
		return 2;
	}

    private void crearImagen(int idImagen){
        imagenAct = new Imagen();  
        imagenAct.setIdImagen(idImagen);                
    }

    private void insImagen(){
        todasImagenesAct.add(todasImagenesAct,imagenAct);
    }

    public ListaEnlSim<Imagen> getTodasImagenes(){
        return todasImagenesAct;
    }

    public ListaEnlSim<ErrorCom> getErroresCom(){
        return this.erroresCom;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserImg$actions {
  private final ParserImg parser;

  /** Constructor */
  CUP$ParserImg$actions(ParserImg parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserImg$do_action_part00000000(
    int                        CUP$ParserImg$act_num,
    java_cup.runtime.lr_parser CUP$ParserImg$parser,
    java.util.Stack            CUP$ParserImg$stack,
    int                        CUP$ParserImg$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserImg$result;

      /* select the action based on the action number */
      switch (CUP$ParserImg$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-1)).value;
		RESULT = start_val;
              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-1)), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserImg$parser.done_parsing();
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int idImgleft = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-1)).left;
		int idImgright = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-1)).right;
		String idImg = (String)((java_cup.runtime.Symbol) CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-1)).value;
crearImagen(Integer.valueOf(idImg));
              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("NT$0",3, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-2)).value;
		int idImgleft = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-4)).left;
		int idImgright = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-4)).right;
		String idImg = (String)((java_cup.runtime.Symbol) CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-4)).value;
insImagen();
              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("NT$1",4, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= NUM CORCHI NT$0 sig CORCHD NT$1 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-1)).value;
		int idImgleft = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-6)).left;
		int idImgright = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-6)).right;
		String idImg = (String)((java_cup.runtime.Symbol) CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-6)).value;

              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-6)), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= error inicio 
            {
              Object RESULT =null;

              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-1)), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= 
            {
              Object RESULT =null;

              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
		int idCapaleft = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()).left;
		int idCaparight = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()).right;
		String idCapa = (String)((java_cup.runtime.Symbol) CUP$ParserImg$stack.peek()).value;
imagenAct.setNuevoIdCapaIns(idCapa);
              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("NT$2",5, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sig ::= NUM NT$2 sigp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-1)).value;
		int idCapaleft = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-2)).left;
		int idCaparight = ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-2)).right;
		String idCapa = (String)((java_cup.runtime.Symbol) CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-2)).value;

              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sig ::= error sig 
            {
              Object RESULT =null;

              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-1)), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sig ::= 
            {
              Object RESULT =null;

              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sigp ::= COMA sig 
            {
              Object RESULT =null;

              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("sigp",2, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-1)), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sigp ::= error sigp 
            {
              Object RESULT =null;

              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("sigp",2, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.elementAt(CUP$ParserImg$top-1)), ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sigp ::= 
            {
              Object RESULT =null;

              CUP$ParserImg$result = parser.getSymbolFactory().newSymbol("sigp",2, ((java_cup.runtime.Symbol)CUP$ParserImg$stack.peek()), RESULT);
            }
          return CUP$ParserImg$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserImg$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserImg$do_action(
    int                        CUP$ParserImg$act_num,
    java_cup.runtime.lr_parser CUP$ParserImg$parser,
    java.util.Stack            CUP$ParserImg$stack,
    int                        CUP$ParserImg$top)
    throws java.lang.Exception
    {
              return CUP$ParserImg$do_action_part00000000(
                               CUP$ParserImg$act_num,
                               CUP$ParserImg$parser,
                               CUP$ParserImg$stack,
                               CUP$ParserImg$top);
    }
}

}
